#!/bin/bash
#------------------------------------------------
# PYTHON ENVIRONMENT
#------------------------------------------------

# startup script for python
export PYTHONSTARTUP=$PROFILE/pythonstartup

# PIPE ENV
export PIPENV_VENV_IN_PROJECT=1

# SETUP PYENV
fact=`command -v pyenv`
if [ "x${fact}" != "x" ]; then
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
    #eval "$(pyenv virtualenv-init -)"
    pyenv rehash
fi


# Support for poetry and pipx
export PATH="$PATH:/Users/ashish/.local/bin"

alias poetry_shell='. "$(dirname $(poetry run which python))/activate"'

function _my_venv(){
  local cur prev opts
  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  startup_arguments="--help --pyenv"
  all_arguments="--help --pyenv --activate --pip-upgrade"
  if [[ "$prev" == "my-venv" ]]; then
        COMPREPLY=($( compgen -W "${startup_arguments}" -- $cur ) )
        return
  fi
  if [[ "$cur" == -* ]]; then
        COMPREPLY=($( compgen -W "${all_arguments}" -- $cur ) )
        return
  fi
  case "$prev" in
      --help )
            COMPREPLY=()
            return
            ;;
      --pyenv )
            local pyenvlist=`ls -1 $HOME/.vpython/ | cut -d '/' -f1`
            COMPREPLY=($( compgen -W "${pyenvlist}" -- $cur ) )
            return
            ;;
      --activate )
            COMPREPLY=()
            return
            ;;
      --pip-upgrade )
            COMPREPLY=()
            return
            ;;
      --* )
            COMPREPLY=($( compgen -W "${all_arguments}" -- $cur ) )
            return
            ;;
  esac
  if [[ "$cur" != -* ]]; then
        COMPREPLY=($( compgen -W "${all_arguments}" -- $cur ) )
        return
  fi
}


function my-venv(){
  numargs=$#
  action=
  for ((i=1 ; i <= numargs ; i++))
  do
    if [[ "x$1" == "x" ]];  then
        break
    fi
    case "$1" in
        --help)
                echo "Command line options:"
                echo "  --help            Show this help"
                echo "  --pyenv           Choose pyenv version associated with the virtualenv"
                echo "  --activate        Activate master virtualenv"
                echo "  --pip-upgrade     Upgrade PIP and PIPENV "
                break
                ;;
        --pyenv)
                break
                ;;
        --activate)
                break
                ;;
        --pip-upgrade)
                break
                ;;
    esac
  done
}

complete -F _my_venv my-venv



# SETUP VIRTUALENV HOME DIRECTORY
fact=`command -v virtualenv`
if [ "x${fact}" != "x" ]; then

    # Restrict usage of pip command to virtualenv
    # export PIP_REQUIRE_VIRTUALENV=true
    export PIP_DOWNLOAD_CACHE=$HOME/.pip/cache
    # alias pip='pip --require-virtualenv'
    # Where all virtualenvs reside
    export VIRTUALENVHOME=${HOME}/.vpython
    mkdir -p ${HOME}/.vpython

    # Helper function to activate/deactivate python virtual environment
    venv (){
        if [ "$#" -ne 1 ] || ! [ -d "${HOME}/.vpython/$1" ]; then
            echo -e "\033[1;31mSpecify the correct python virtual environment to activate ... \033[0m"
            echo -e "\033[1;33mAll python virtual environments ... \033[0m"
            ls -1 ${HOME}/.vpython
            echo
        else
            if [ "x${VIRTUAL_ENV}" == "x" ]; then
                source ${HOME}/.vpython/$1/bin/activate
            else
                echo -e "\033[1;31mDeactivate current python virtual environment first ... \033[0m"
                echo
            fi
        fi
    }

    mkvenv(){
        if [ "$#" -ne 1 ] ; then
            echo -e "\033[1;31mSpecify the correct python virtual environment name to create  ... \033[0m"
            echo
        else
            if [ -d "${HOME}/.vpython/$1" ]; then
                echo -e "\033[1;31mGiven python virtual environment name already exists  ... \033[0m"
                echo
            else
                cur_dir=`pwd`
                cd ${HOME}/.vpython
                virtualenv $1
                source ${HOME}/.vpython/$1/bin/activate
                cd ${cur_dir}
                unset cur_dir
            fi
        fi
    }


fi

# You must install Pygments first - "pip nstall Pygments"
alias c='pygmentize -O style=monokai -f console256 -g'

# Changes your current working directory to be the library or site-packages location of that library
pycd () {
        pushd `python -c "import os.path, $1; print(os.path.dirname($1.__file__))"`;
    }


pip-upgrade(){
    echo "Upgrading all packages ...."
    pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U
}

pyenv-bootstrap(){
    brew_install_package readline
    brew install zlib
    brew_install_package xz
    brew_install_package sqlite3
    brew_install_package openssl
    brew_install_package expat
    brew install 'openssl@1.1'
}

pyenv-avail(){
    pyenv install -l
}


pyenv-install(){

version=$1

unset CFLAGS
unset CPPFLAGS
unset LDFLAGS
unset PKG_CONFIG_PATH

export CFLAGS="-I$(xcrun --show-sdk-path)/usr/include"
export CFLAGS="-I$(brew --prefix readline)/include $CFLAGS"
#export CFLAGS="-I$(brew --prefix openssl)/include $CFLAGS"
export CFLAGS="-I$(brew --prefix sqlite)/include $CFLAGS"
export CFLAGS="-I$(brew --prefix xz)/include $CFLAGS"

export CPPFLAGS="-I$(xcrun --show-sdk-path)/usr/include"
export CPPFLAGS="-I$(brew --prefix readline)/include $CPPFLAGS"
#export CPPFLAGS="-I$(brew --prefix openssl)/include $CPPFLAGS"
export CPPFLAGS="-I$(brew --prefix sqlite)/include $CPPFLAGS"
export CPPFLAGS="-I$(brew --prefix xz)/include $CPPFLAGS"
export CPPFLAGS="-I/usr/local/opt/openssl@1.1/include $CPPFLAGS"

#export PKG_CONFIG_PATH="$(brew --prefix openssl)/lib/pkgconfig $PKG_CONFIG_PATH"
export PKG_CONFIG_PATH="/usr/local/opt/openssl@1.1/lib/pkgconfig $PKG_CONFIG_PATH"

export LDFLAGS="-I$(xcrun --show-sdk-path)/usr/lib $LDFLAGS"
export LDFLAGS="-L$(brew --prefix readline)/lib $LDFLAGS"
#export LDFLAGS="-L$(brew --prefix openssl)/lib $LDFLAGS"
export LDFLAGS="-L$(brew --prefix sqlite)/lib $LDFLAGS"
export LDFLAGS="-L$(brew --prefix xz)/lib $LDFLAGS"
export LDFLAGS="-L/usr/local/opt/openssl@1.1/lib $LDFLAGS"

# export CONFIGURE_OPTS="--with-openssl=$(brew --prefix openssl) $CONFIGURE_OPTS"
export CONFIGURE_OPTS="--with-openssl=$(brew --prefix openssl@1.1) $CONFIGURE_OPTS"

export PYTHON_CONFIGURE_OPTS="--enable-unicode=ucs2 $PYTHON_CONFIGURE_OPTS"
export PYTHON_CONFIGURE_OPTS="--enable-optimizations $PYTHON_CONFIGURE_OPTS"

CFLAGS="$CFLAGS" \
LDFLAGS="$LDFLAGS" \
PKG_CONFIG_PATH="$PKG_CONFIG_PATH" \
CPPFLAGS="$CPPFLAGS" \
CONFIGURE_OPTS="$CONFIGURE_OPTS" \
PYTHON_CONFIGURE_OPTS="$PYTHON_CONFIGURE_OPTS" \
pyenv install -v ${version}
}

venv-make(){
    name=$1
    pversion=`python -c "import platform; print(platform.sys.version_info.major)"`
    mkdir -p $HOME/.vpython/$pversion
    virtualenv $HOME/.vpython/$pversion/$name
}

venv-master(){
    source $HOME/.vpython/3/3.7.4/venv-3.7.4/bin/activate
}
