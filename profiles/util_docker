#!/bin/bash
#------------------------------------------------
# Docker helpers
#------------------------------------------------


# Handle command completions
test -e "/Applications/Docker.app/Contents/Resources/etc/docker.bash-completion" && source "/Applications/Docker.app/Contents/Resources/etc/docker.bash-completion"
test -e "/Applications/Docker.app/Contents/Resources/etc/docker-machine.bash-completion" && source "/Applications/Docker.app/Contents/Resources/etc/docker-machine.bash-completion"
test -e "/Applications/Docker.app/Contents/Resources/etc/docker-compose.bash-completion" && source "/Applications/Docker.app/Contents/Resources/etc/docker-compose.bash-completion"

function dock-help() {
cat << EOF
Special docker functions are marked with dock-

  Image commands: dock-image-*
  Containers:     dock-container-*
  Volume:         dock-volume-*
  Exec commands:  dock-exec-*
EOF
}

function _dock_image_tag() {

	local cur opt candidates
	cur=${COMP_WORDS[COMP_CWORD]}
	prev=${COMP_WORDS[COMP_CWORD-1]}
	candidates=`docker image ls | tail -n +2 | awk '{printf $1}{printf ":"}{printf $2}{printf " "}'`
	COMPREPLY=( $(compgen -W "${candidates}" -- $2) )
}

function _dock_image_id() {

	local cur opt candidates
	cur=${COMP_WORDS[COMP_CWORD]}
	prev=${COMP_WORDS[COMP_CWORD-1]}
	candidates=`docker image ls | tail -n +2 | awk '{printf $3}{printf " "}'`
	COMPREPLY=( $(compgen -W "${candidates}" -- $2) )
}

# show docker images
function dock-image-ls(){
  docker image ls
}

# Remove dangling images
function dock-image-clean-dangling() {
  	docker rmi $* $(docker images -q -a -f dangling=true)
}

# Remove an docker image
function dock-image-rm() {
  if [ $# -lt 1 ]
    then
      echo "Provide image id"
      return 1
    fi
  docker rmi $1;
}

function dock-image-rm-tag() {
  if [ $# -lt 1 ]
    then
      echo "Provide image repo:tag"
      return 1
    fi
  docker rmi $1;
}

function dock-image-rm-id() {
  if [ $# -lt 1 ]
    then
      echo "Provide image id"
      return 1
    fi
  docker rmi $1;
}

complete -F _dock_image_tag -o default dock-image-rm-tag
complete -F _dock_image_id -o default dock-image-rm-id

# remove latest created images
function dock-image-rm-latest(){
  dock-image-rm $(docker images -q | awk 'NR == 1 {print $0}{printf " "}')
}

# Remove all Docker images
alias dock-image-rm-all='docker rmi $(docker images -q)'

# Spwan containers from images
function dock-image-spawn-id(){
  if [ $# -lt 1 ]; then
      echo "Provide image id"
      return 1
  fi
  cur_dir=`pwd`
  if  [ $# -ge 2 ]; then
    ps_id="docker run --name $2 -v ${cur_dir}:/native --detach --restart always --tty $1"
  else
    ps_id="docker run -v ${cur_dir}:/native --detach --restart always --tty $1"
  fi
  echo $ps_id
  psid=`${ps_id}`
  psidshort=${psid::12}
  echo "Starting container: ${psidshort}"
}

# Spwan containers from images
function dock-image-spawn-tag(){
  if [ $# -lt 1 ]; then
      echo "Provide image id"
      return 1
  fi
  cur_dir=`pwd`
  if  [ $# -ge 2 ]; then
    ps_id="docker run --name $2 -v ${cur_dir}:/native --detach --restart always --tty $1"
  else
    ps_id="docker run -v ${cur_dir}:/native --detach --restart always --tty $1"
  fi
  echo $ps_id
  psid=`${ps_id}`
  psidshort=${psid::12}
  echo "Starting container: ${psidshort}"
}

complete -F _dock_image_id -o default dock-image-spawn-id
complete -F _dock_image_tag -o default dock-image-spawn-tag


###########
##
## Docker containers
##
###########

function _dock_container_id() {

	local cur opt candidates
	cur=${COMP_WORDS[COMP_CWORD]}
	prev=${COMP_WORDS[COMP_CWORD-1]}
	candidates=`docker ps | tail -n +2 | awk '{printf $1}{printf " "}'`
	COMPREPLY=( $(compgen -W "${candidates}" -- $2) )
}

function _dock_container_name() {

	local cur opt candidates
	cur=${COMP_WORDS[COMP_CWORD]}
	prev=${COMP_WORDS[COMP_CWORD-1]}
	candidates=`docker ps | tail -n +2 | awk '{printf $NF}{printf " "}'`
	COMPREPLY=( $(compgen -W "${candidates}" -- $2) )
}

function dock-container-ps() {
	docker ps
}

function dock-container-rm-id() {
	docker rm $1
}

complete -F _dock_container_id -o default dock-container-rm-id

function dock-container-rm-all(){
  # Remove all Docker container
  docker rm $(docker ps -a -q)
}

#Inspect a running Docker container
function dock-container-find() {
  docker ps | grep "$1 " | cut -d ' ' -f1
}

function dock-container-exec-id() {
  docker exec -e COLUMNS=$COLUMNS -e LINES=$LINES -e TERM=$TERM -it $1 /bin/bash
}

function dock-container-exec-name() {
  docker exec -e COLUMNS=$COLUMNS -e LINES=$LINES -e TERM=$TERM -it $1 /bin/bash
}

complete -F _dock_container_id -o default dock-container-exec-id
complete -F _dock_container_name -o default dock-container-exec-name

# show cotainer logs. You would pass the container id
function dock-container-logs(){
  docker logs $1
}

complete -F _dock_container_id -o default dock-container-logs

# watching cotainer logs. You would pass the container id
function dock-container-tail(){
  docker logs -f $1
}

complete -F _dock_container_id -o default dock-container-tail

function dock-container-stop(){
  docker stop $@
}

complete -F _dock_container_id -o default dock-container-stop

function dock-container-stop-all(){
  docker stop $(docker ps -a -q)
}

function dock-container-rm-exited() {
  echo "Deleting all containers"
  docker rm $(docker ps -qf "status=exited") $(docker ps -qf "status=created")
}


alias dock-ps='docker ps'
alias dock-ps-all='docker ps -a'
alias dock-ps-exited='docker ps -f "status=exited"'
alias dock-up='docker-compose up -d'
alias dock-down='docker-compose down -v'
# Kill all running Docker container
alias dock-kill-all='docker kill $(docker ps -q)'




###########
##
## Docker volumes
##
###########

# show all docker volulmes
alias dock-volume-ls='docker volume ls'

# remove some volumes. You would pass the volume names.
function dock-volume-rm(){
  docker volume rm $@
}


# Store all container commands in host bash history
alias dock-bash='docker run -e HIST_FILE=/root/.bash_history -v=$HOME/.bash_history:/root/.bash_history'
